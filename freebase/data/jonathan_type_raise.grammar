#lexicon
(rule $Binary (bordering) (ConstantFn (lambda x (fb:location.location.adjoin_s (fb:location.adjoining_relationship.adjoins (var x)))) (-> fb:type.any fb:type.any)))
(rule $Entity (oregon) (ConstantFn fb:en.oregon fb:type.any))
(rule $Entity (nevada) (ConstantFn fb:en.nevada fb:type.any))
(rule $Entity (arizona) (ConstantFn fb:en.arizona fb:type.any))
#type raising
(rule $FunctionSet ($Entity) (JoinFn betaReduce forward (arg0 (lambda x (lambda f ((var f) (var x)))) (-> fb:type.any (-> (-> fb:type.any fb:type.any) fb:type.any))))) 

(rule $Conj (and) (ConstantFn (lambda a (lambda b (lambda g (and ((var a) (var g)) ((var b) (var g)))))) (-> (-> (-> fb:type.any fb:type.any) fb:type.any) (-> (-> (-> fb:type.any fb:type.any) fb:type.any) (-> (-> fb:type.any fb:type.any) fb:type.any)))))

(rule $ConjRight ($Conj $FunctionSet) (JoinFn betaReduce forward))
(rule $FunctionSet ($FunctionSet $ConjRight) (JoinFn betaReduce backward))

#General
(rule $Set ($Binary $FunctionSet) (JoinFn betaReduce backward))
#(rule $Set ($Binary $Set) (JoinFn betaReduce forward))
#(rule $Set ($Entity) (IdentityFn))
(rule $ROOT ($Set) (IdentityFn))
