# Simple rule-based system for Freebase QA.
# Still needs some parameter tuning due to ambiguity.

(def @type fb:type.object.type)
(def @male (fb:people.person.gender fb:en.male))
(def @female (fb:people.person.gender fb:en.female))
(def @containedby (lambda x (or (fb:location.location.containedby (var x)) (fb:location.location.partially_containedby (var x)))))

(when (not strict)
  (rule $NamedEntity ($PHRASE) (FilterPosTagFn span NN NNS NNP NNPS))
)
(rule $NamedEntity ($PHRASE) (FilterNerSpanFn PERSON ORGANIZATION LOCATION MISC))
(rule $Entity ($NamedEntity) (LexiconFn entity fbsearch))
(rule $Set ($Entity) (IdentityFn))

# Easy properties whose directionality can be inferred
(for @x (language languages speak spoken) (rule $Property (@x) (ConstantFn fb:location.country.official_language)))
(for @x (book books write wrote written) (rule $Property (@x) (ConstantFn fb:book.author.works_written)))

(for @x (parents) (rule $Property (@x) (ConstantFn fb:people.person.parents)))
(for @x (mother mom) (rule $Property (@x) (ConstantFn (lambda x (fb:people.person.parents (and (var x) @female))))))
(for @x (father dad) (rule $Property (@x) (ConstantFn (lambda x (fb:people.person.parents (and (var x) @male))))))
(for @x (sibling siblings) (rule $Property (@x) (ConstantFn (lambda x (and (!= (var x)) (fb:people.person.sibling_s (fb:people.sibling_relationship.sibling (var x))))))))
(for @x (sister sisters) (rule $Property (@x) (ConstantFn (lambda x (and (!= (var x)) (fb:people.person.sibling_s (fb:people.sibling_relationship.sibling (and (var x) @female))))))))
(for @x (brother brothers) (rule $Property (@x) (ConstantFn (lambda x (and (!= (var x)) (fb:people.person.sibling_s (fb:people.sibling_relationship.sibling (and (var x) @male))))))))
(for @x (child children kid kids) (rule $Property (@x) (ConstantFn fb:people.person.children)))
(for @x (son sons) (rule $Property (@x) (ConstantFn (lambda x (fb:people.person.children (and (var x) @male))))))
(for @x (daughter daughters) (rule $Property (@x) (ConstantFn (lambda x (fb:people.person.children (and (var x) @female))))))
(for @x (spouse marry married marrying wife husband) (rule $Property (@x) (ConstantFn (lambda x (and (!= (var x)) (fb:people.person.spouse_s (fb:people.marriage.spouse (var x))))))))

(for @x (tall height) (rule $Property (@x) (ConstantFn fb:people.person.height_meters)))
(for @x (tall height elevation) (rule $Property (@x) (ConstantFn fb:geography.mountain.elevation)))
(for @x (long length) (rule $Property (@x) (ConstantFn fb:geography.river.length)))
(for @x (deep depth) (rule $Property (@x) (ConstantFn fb:geography.body_of_water.depth)))
(for @x ((live) (lived)) (rule $Property @x (ConstantFn (lambda x (fb:people.person.places_lived (fb:people.place_lived.location (var x)))))))
(for @x ((founded) (founder) (founders)) (rule $Property @x (ConstantFn fb:organization.organization.founders)))
(for @x ((president)) (rule $Property @x (ConstantFn (lambda x (fb:government.governmental_jurisdiction.governing_officials (and (fb:government.government_position_held.basic_title fb:en.president) (fb:government.government_position_held.office_holder (var x))))))))
(for @x ((school) (schools) (education) (study)) (rule $Property @x (ConstantFn (lambda x (fb:people.person.education (fb:education.education.institution (var x)))))))
(for @x ((college) (colleges) (university) (universities)) (rule $Property @x (ConstantFn (lambda x (fb:people.person.education (fb:education.education.institution (and (var x) (@type fb:education.university))))))))
(for @x ((win) (won) (award) (awards)) (rule $Property @x (ConstantFn (lambda x (fb:award.award_winner.awards_won (fb:award.award_honor.award (var x)))))))
(for @x ((win) (won)) (rule $Property @x (ConstantFn fb:sports.sports_team.championships)))
(for @x ((border) (borders) (bordering)) (rule $Property @x (ConstantFn (lambda x (fb:location.location.adjoin_s (fb:location.adjoining_relationship.adjoins (var x)))))))
(for @x ((style) (genre)) (rule $Property @x (ConstantFn fb:music.artist.genre)))
(for @x ((style) (genre)) (rule $Property @x (ConstantFn fb:visual_art.visual_artist.associated_periods_or_movements)))

(for @x ((government) (political system)) (rule $Property @x (ConstantFn fb:location.country.form_of_government)))
(for @x ((attractions) (to do) (to see)) (rule $Property @x (ConstantFn fb:travel.travel_destination.tourist_attractions)))

(for @x ((river) (rivers)) (rule $Unary @x (ConstantFn (@type fb:geography.river))))
(for @x ((lake) (lakes)) (rule $Unary @x (ConstantFn (@type fb:geography.lake))))
(for @x ((mountain) (mountains)) (rule $Unary @x (ConstantFn (@type fb:geography.mountain))))
(for @x ((city) (cities)) (rule $Unary @x (ConstantFn (@type fb:location.citytown))))
(for @x ((state) (states)) (rule $Unary @x (ConstantFn (@type fb:location.us_state))))
(rule $Property ($Unary) (lambda u (lambda x (fb:location.location.contains (and (var x) (var u))))))

(for @x (continent) (rule $Property (@x) (ConstantFn (lambda x (@containedby (and (var x) (@type fb:location.continent)))))))
(for @x (county) (rule $Property (@x) (ConstantFn (lambda x (@containedby (and (var x) (@type fb:location.us_county)))))))
(for @x (country) (rule $Property (@x) (ConstantFn (lambda x (@containedby (and (var x) (@type fb:location.country)))))))
(for @x (located) (rule $Property (@x) (ConstantFn @containedby)))
(for @x (capital) (rule $Property (@x) (ConstantFn fb:location.country.capital)))
(for @x (capital) (rule $Property (@x) (ConstantFn fb:location.us_state.capital)))

(for @x ((currency) (money)) (rule $Property @x (ConstantFn fb:location.country.currency_used)))
(for @x ((timezone) (timezones) (time zone) (time zones)) (rule $Property @x (ConstantFn fb:location.location.time_zones)))
(for @x ((zipcode) (zipcodes) (zip code) (zip codes)) (rule $Property @x (ConstantFn fb:location.citytown.postal_codes)))
(for @x ((die of) (die from) (died of) (cause of death) (died from)) (rule $Property @x (ConstantFn fb:people.deceased_person.cause_of_death)))
(for @x ((star in) (starred in) (movie) (movies) (film) (films)) (rule $Property @x (ConstantFn (lambda x (fb:film.actor.film (fb:film.performance.film (var x)))))))
(for @x ((play for) (team) (teams)) (rule $Property @x (ConstantFn (lambda x (fb:sports.pro_athlete.teams (fb:sports.sports_team_roster.team (var x)))))))
(for @x ((invention) (inventions) (invent) (invented) (inventor)) (rule $Property @x (ConstantFn fb:law.invention.inventor)))
(for @x ((religion) (beliefs) (believe in)) (rule $Property @x (ConstantFn fb:people.person.religion)))
(for @x ((instrument) (play)) (rule $Property @x (ConstantFn fb:music.group_member.instruments_played)))
(for @x ((party)) (rule $Property @x (ConstantFn (lambda x (fb:government.politician.party (fb:government.political_party_tenure.party (var x)))))))
(for @x ((drafted) (start) (started)) (rule $Property @x (ConstantFn fb:sports.pro_athlete.career_start)))
(for @x ((headquarters)) (rule $Property @x (ConstantFn (lambda x (fb:organization.organization.headquarters (fb:location.mailing_address.country (var x)))))))
(for @x ((tv)) (rule $Property @x (ConstantFn (lambda x (fb:tv.tv_actor.starring_roles (fb:tv.regular_tv_appearance.series (var x)))))))

(rule $Query (($PHRASE optional) $Property ($PHRASE optional) $Set ($PHRASE optional)) (JoinFn unaryCanBeArg0 unaryCanBeArg1 binary,unary))
(rule $Query (($PHRASE optional) $Set ($PHRASE optional) $Property ($PHRASE optional)) (JoinFn unaryCanBeArg0 unaryCanBeArg1 unary,binary))

# Typed by where and when
(for @x ((founded)) (rule $WhenProperty @x (ConstantFn fb:organization.organization.date_founded)))
(for @x ((founded)) (rule $WhereProperty @x (ConstantFn fb:organization.organization.place_founded)))
(for @x ((born)) (rule $WhenProperty @x (ConstantFn fb:people.person.date_of_birth)))
(for @x ((born) (grow up) (from)) (rule $WhereProperty @x (ConstantFn fb:people.person.place_of_birth)))
(for @x ((die) (died)) (rule $WhenProperty @x (ConstantFn fb:people.deceased_person.date_of_death)))
(for @x ((die) (died)) (rule $WhereProperty @x (ConstantFn fb:people.deceased_person.place_of_death)))
(for @x ((play)) (rule $WhereProperty @x (ConstantFn fb:sports.sports_team.arena_stadium)))

(for @x ((when) (what year) (what date)) (rule $When @x (ConstantFn null)))
(for @x ((where) (what city) (what country)) (rule $Where @x (ConstantFn null)))
(rule $WhenSet ($When ($PHRASE optional) $Set) (SelectFn 1))
(rule $WhereSet ($Where ($PHRASE optional) $Set) (SelectFn 1))
(when (not strict)
  (rule $ROOT ($WhenSet ($PHRASE optional) $WhenProperty ($PHRASE optional)) (JoinFn unaryCanBeArg0 unary,binary))
  (rule $ROOT ($WhereSet ($PHRASE optional) $WhereProperty ($PHRASE optional)) (JoinFn unaryCanBeArg0 unary,binary))
)

# fb:time.event.start_date

# Properties that can only go at the beginning or end
(for @x ((who was)) (rule $BeginProperty @x (ConstantFn fb:people.person.profession)))
(for @x ((occupation) (known for) (famous for)) (rule $Property @x (ConstantFn fb:people.person.profession)))
(for @x ((known for) (famous for)) (rule $Property @x (ConstantFn fb:base.argumentmaps.innovator.original_ideas)))
(for @x ((do) (do for a living) (doing now)) (rule $EndProperty @x (ConstantFn fb:people.person.profession)))

(when (not strict)
  (rule $ROOT (($PHRASE optional) $Set $EndProperty (? optional)) (JoinFn unaryCanBeArg0 unary,binary))
  (rule $ROOT ($BeginProperty $Set (? optional)) (JoinFn unaryCanBeArg0 binary,unary))
)

# Verbs (directionality is important)
(for @x ((influence) (influenced) (inspire) (inspired)) (rule $Verb @x (ConstantFn fb:influence.influence_node.influenced)))

# Handle verbs
(rule $Query (($PHRASE optional) $Verb $Set ($PHRASE optional)) (JoinFn unaryCanBeArg1 binary,unary)) # who influenced van Gogh?
(rule $Query (($PHRASE optional) $Verb by $Set ($PHRASE optional)) (JoinFn unaryCanBeArg0 binary,unary)) # who was influenced by van Gogh?
(rule $Query (($PHRASE optional) $Set $Verb (? optional)) (JoinFn unaryCanBeArg0 unary,binary)) # who did van Gogh influence?
(rule $Query (($PHRASE optional) $Set $Verb by ($PHRASE optional)) (JoinFn unaryCanBeArg1 unary,binary)) # who was van Gogh influenced by?

#(rule $ROOT ($Query) (IdentityFn))

# Counting
(when (not strict)
  (rule $ROOT (how many $Query) (lambda x (count (var x))))
)

# Superlatives
(rule $Degree (biggest) (ConstantFn fb:location.location.area))
(rule $Degree (largest) (ConstantFn fb:location.location.area))
(rule $Property (population) (ConstantFn (lambda x (!fb:measurement_unit.dated_integer.number (argmax 1 1 (!fb:location.statistical_region.population (var x)) fb:measurement_unit.dated_integer.year)))))
(rule $Degree (largest) (ConstantFn (lambda x (fb:location.statistical_region.population (fb:measurement_unit.dated_integer.number (var x))))))
(rule $Degree (tallest) (ConstantFn fb:people.person.height_meters))
(rule $Degree (tallest) (ConstantFn fb:geography.mountain.elevation))
(rule $Degree (longest) (ConstantFn fb:geography.river.length))
(rule $Degree (deepest) (ConstantFn fb:geography.body_of_water.depth))
(rule $Superlative ($Degree) (lambda d (lambda x (argmax 1 1 (var x) (var d)))))
(rule $Ordinal ($PHRASE) (NumberFn ORDINAL)) # second
(rule $Number ($PHRASE) (NumberFn NUMBER)) # two
(rule $Superlative ($Ordinal $Degree) (lambda n (lambda d (lambda x (argmax (var n) 1 (var x) (var d)))))) # second largest
(rule $Superlative ($Number $Degree) (lambda n (lambda d (lambda x (argmax 1 (var n) (var x) (var d)))))) # two largest

# (execute (argmax 1 2 (and (and (@type fb:location.citytown) (@containedby fb:en.california)) (not (!fb:geography.river.cities (@type fb:geography.river)))) fb:location.location.area))
(rule $Set ($Unary) (IdentityFn)) # river
(rule $Restrict (in ($Optional optional) $Set) (lambda x (@containedby (var x)))) # in California
(rule $Restrict (near ($Optional optional) $Set) (lambda x (!fb:geography.river.cities (var x)))) # near a river
(rule $Restrict (not $Restrict) (lambda x (not (var x)))) # not in California
(rule $Set ($Set ($Optional optional) $Restrict) (lambda x (lambda y (and (var x) (var y)))))

(for @x (what is are was were a an the that) (rule $OptionalWord (@x) (ConstantFn null)))
(rule $Optional ($OptionalWord) (IdentityFn))
(rule $Optional ($OptionalWord $Optional) (IdentityFn))

(rule $ROOT ($Set) (IdentityFn))
(rule $ROOT (($Optional optional) $Superlative $Set (? optional)) (JoinFn forward betaReduce))

(for @x ((first winner) (first $PHRASE win)) (rule $Property @x (ConstantFn (lambda x (!fb:award.award_honor.award_winner (argmin 1 1 (fb:award.award_honor.award (var x)) fb:award.award_honor.year))))))

# Debugging
(rule $ROOT (e $Entity) (IdentityFn))
